{
  "cacheItemsMap": {
    "blog/2025-07-01-first-post.md": {
      "document": {
        "title": "What's the Vibe",
        "date": "2025-07-01T00:00:00.000Z",
        "description": "A deep dive into my journey of building an AI-powered application using Next.js, OpenAI, and TypeScript.",
        "tags": [
          "AI",
          "Next.js",
          "TypeScript"
        ],
        "published": true,
        "image": "https://images.unsplash.com/photo-1677442136019-21780ecad995",
        "timeToComplete": "2 weeks",
        "body": {
          "raw": "\n# Building My First AI-Powered Application\n\nAs a software engineer, I've always been fascinated by the potential of artificial intelligence to transform how we build applications. In this post, I'll share my experience creating my first AI-powered application using Next.js, OpenAI's GPT-4, and TypeScript.\n\n## The Initial Idea\n\nThe concept was simple: build a tool that could help developers write better documentation. By leveraging GPT-4's natural language processing capabilities, I wanted to create an application that could analyze code and automatically generate comprehensive documentation.\n\n## Technical Implementation\n\nThe tech stack I chose included:\n\n- Next.js for the frontend and API routes\n- TypeScript for type safety\n- OpenAI's GPT-4 API for AI capabilities\n- Tailwind CSS for styling\n\n```typescript\ninterface DocumentationRequest {\n  code: string;\n  language: string;\n  style: 'brief' | 'detailed';\n}\n\nasync function generateDocumentation(params: DocumentationRequest) {\n  const completion = await openai.createCompletion({\n    model: \"gpt-4\",\n    prompt: buildPrompt(params),\n    max_tokens: 1000\n  });\n  \n  return completion.choices[0].text;\n}\n```\n\n## Lessons Learned\n\n1. AI models require careful prompt engineering\n2. Rate limiting is crucial for API stability\n3. Type safety helps prevent runtime errors\n4. Error handling needs special attention\n\n## What's Next?\n\nI'm planning to expand this project by:\n\n- Adding support for more programming languages\n- Implementing batch processing\n- Creating a VS Code extension\n\nStay tuned for more updates on this journey! ",
          "html": "<h1>Building My First AI-Powered Application</h1>\n<p>As a software engineer, I've always been fascinated by the potential of artificial intelligence to transform how we build applications. In this post, I'll share my experience creating my first AI-powered application using Next.js, OpenAI's GPT-4, and TypeScript.</p>\n<h2>The Initial Idea</h2>\n<p>The concept was simple: build a tool that could help developers write better documentation. By leveraging GPT-4's natural language processing capabilities, I wanted to create an application that could analyze code and automatically generate comprehensive documentation.</p>\n<h2>Technical Implementation</h2>\n<p>The tech stack I chose included:</p>\n<ul>\n<li>Next.js for the frontend and API routes</li>\n<li>TypeScript for type safety</li>\n<li>OpenAI's GPT-4 API for AI capabilities</li>\n<li>Tailwind CSS for styling</li>\n</ul>\n<pre><code class=\"language-typescript\">interface DocumentationRequest {\n  code: string;\n  language: string;\n  style: 'brief' | 'detailed';\n}\n\nasync function generateDocumentation(params: DocumentationRequest) {\n  const completion = await openai.createCompletion({\n    model: \"gpt-4\",\n    prompt: buildPrompt(params),\n    max_tokens: 1000\n  });\n  \n  return completion.choices[0].text;\n}\n</code></pre>\n<h2>Lessons Learned</h2>\n<ol>\n<li>AI models require careful prompt engineering</li>\n<li>Rate limiting is crucial for API stability</li>\n<li>Type safety helps prevent runtime errors</li>\n<li>Error handling needs special attention</li>\n</ol>\n<h2>What's Next?</h2>\n<p>I'm planning to expand this project by:</p>\n<ul>\n<li>Adding support for more programming languages</li>\n<li>Implementing batch processing</li>\n<li>Creating a VS Code extension</li>\n</ul>\n<p>Stay tuned for more updates on this journey!</p>"
        },
        "_id": "blog/2025-07-01-first-post.md",
        "_raw": {
          "sourceFilePath": "blog/2025-07-01-first-post.md",
          "sourceFileName": "2025-07-01-first-post.md",
          "sourceFileDir": "blog",
          "contentType": "markdown",
          "flattenedPath": "blog/2025-07-01-first-post"
        },
        "type": "Blog",
        "slug": "2025-07-01-first-post",
        "url": "/blog/2025-07-01-first-post",
        "readingTime": 2
      },
      "documentHash": "1751430030758",
      "hasWarnings": false,
      "documentTypeName": "Blog"
    },
    "blog/research-project.md": {
      "document": {
        "title": "Machine Learning Research Project",
        "date": "2025-08-01T00:00:00.000Z",
        "description": "An in-depth look at my ongoing research in machine learning and artificial intelligence.",
        "tags": [
          "Research",
          "Machine Learning",
          "AI",
          "Python",
          "TensorFlow"
        ],
        "published": true,
        "timeToComplete": "6 months",
        "body": {
          "raw": "\n# Machine Learning Research Project\n\n## Project Overview\n\nThis research project focuses on developing novel machine learning approaches for improving natural language understanding in specialized domains. By combining recent advances in transformer architectures with domain-specific training techniques, we aim to create more efficient and accurate models for specific use cases.\n\n## Research Goals\n\n1. Develop new pre-training strategies for domain adaptation\n2. Reduce computational requirements while maintaining model performance\n3. Improve model interpretability for critical applications\n\n## Methodology\n\nOur approach combines several key techniques:\n\n```python\nimport tensorflow as tf\n\nclass DomainAdapter(tf.keras.Model):\n    def __init__(self, base_model, domain_layers):\n        super().__init__()\n        self.base = base_model\n        self.domain_specific = domain_layers\n        \n    def adapt(self, domain_data):\n        # Domain-specific adaptation logic\n        pass\n```\n\n## Preliminary Results\n\nInitial experiments have shown promising results:\n\n- 15% improvement in domain-specific tasks\n- 30% reduction in computational requirements\n- Better interpretability scores on standard benchmarks\n\n## Next Steps\n\nWe are currently working on:\n\n1. Expanding the dataset\n2. Implementing additional baseline comparisons\n3. Preparing for peer review\n\nStay tuned for more updates as the research progresses! ",
          "html": "<h1>Machine Learning Research Project</h1>\n<h2>Project Overview</h2>\n<p>This research project focuses on developing novel machine learning approaches for improving natural language understanding in specialized domains. By combining recent advances in transformer architectures with domain-specific training techniques, we aim to create more efficient and accurate models for specific use cases.</p>\n<h2>Research Goals</h2>\n<ol>\n<li>Develop new pre-training strategies for domain adaptation</li>\n<li>Reduce computational requirements while maintaining model performance</li>\n<li>Improve model interpretability for critical applications</li>\n</ol>\n<h2>Methodology</h2>\n<p>Our approach combines several key techniques:</p>\n<pre><code class=\"language-python\">import tensorflow as tf\n\nclass DomainAdapter(tf.keras.Model):\n    def __init__(self, base_model, domain_layers):\n        super().__init__()\n        self.base = base_model\n        self.domain_specific = domain_layers\n        \n    def adapt(self, domain_data):\n        # Domain-specific adaptation logic\n        pass\n</code></pre>\n<h2>Preliminary Results</h2>\n<p>Initial experiments have shown promising results:</p>\n<ul>\n<li>15% improvement in domain-specific tasks</li>\n<li>30% reduction in computational requirements</li>\n<li>Better interpretability scores on standard benchmarks</li>\n</ul>\n<h2>Next Steps</h2>\n<p>We are currently working on:</p>\n<ol>\n<li>Expanding the dataset</li>\n<li>Implementing additional baseline comparisons</li>\n<li>Preparing for peer review</li>\n</ol>\n<p>Stay tuned for more updates as the research progresses!</p>"
        },
        "_id": "blog/research-project.md",
        "_raw": {
          "sourceFilePath": "blog/research-project.md",
          "sourceFileName": "research-project.md",
          "sourceFileDir": "blog",
          "contentType": "markdown",
          "flattenedPath": "blog/research-project"
        },
        "type": "Blog",
        "slug": "research-project",
        "url": "/blog/research-project",
        "readingTime": 1
      },
      "documentHash": "1751430023132",
      "hasWarnings": false,
      "documentTypeName": "Blog"
    }
  }
}
