{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts", "../../../src/lib/utils.ts"],
  "sourcesContent": ["import { defineDocumentType, makeSource } from \"contentlayer/source-files\";\nimport { calculateReadTime } from \"./src/lib/utils\";\n\nexport const Blog = defineDocumentType(() => ({\n  name: \"Blog\",\n  filePathPattern: `blog/*.md`,\n  contentType: \"markdown\",\n  fields: {\n    title: {\n      type: \"string\",\n      required: true,\n    },\n    date: {\n      type: \"date\",\n      required: true,\n    },\n    description: {\n      type: \"string\",\n      required: true,\n    },\n    tags: {\n      type: \"list\",\n      of: { type: \"string\" },\n      default: [],\n    },\n    published: {\n      type: \"boolean\",\n      default: true,\n    },\n    image: {\n      type: \"string\",\n      required: false,\n    },\n    // For Medium cross-posting\n    canonicalUrl: {\n      type: \"string\",\n      required: false,\n    },\n    timeToComplete: {\n      type: \"string\",\n      required: false,\n    },\n    category: {\n      type: \"string\",\n      required: true,\n      options: [\"Project\", \"Paper\", \"Life\", \"Tutorial\", \"Thoughts\"],\n    },\n  },\n  computedFields: {\n    slug: {\n      type: \"string\",\n      resolve: (doc) => doc._raw.sourceFileName.replace(/\\.md$/, \"\"),\n    },\n    url: {\n      type: \"string\",\n      resolve: (doc) => `/blog/${doc._raw.sourceFileName.replace(/\\.md$/, \"\")}`,\n    },\n    readingTime: {\n      type: \"number\",\n      resolve: (doc) => calculateReadTime(doc.body.raw),\n    },\n  },\n}));\n\nexport default makeSource({\n  contentDirPath: \"src/content\",\n  documentTypes: [Blog],\n  disableImportAliasWarning: true,\n}); ", "import { type ClassValue, clsx } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\nexport function calculateReadTime(content: string): number {\n  const wordsPerMinute = 200;\n  const words = content.trim().split(/\\s+/).length;\n  const readTime = Math.ceil(words / wordsPerMinute);\n  return readTime;\n}\n"],
  "mappings": ";AAAA,SAAS,oBAAoB,kBAAkB;;;ACA/C,SAA0B,YAAY;AACtC,SAAS,eAAe;AAMjB,SAAS,kBAAkB,SAAyB;AACzD,QAAM,iBAAiB;AACvB,QAAM,QAAQ,QAAQ,KAAK,EAAE,MAAM,KAAK,EAAE;AAC1C,QAAM,WAAW,KAAK,KAAK,QAAQ,cAAc;AACjD,SAAO;AACT;;;ADTO,IAAM,OAAO,mBAAmB,OAAO;AAAA,EAC5C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO;AAAA,MACL,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,aAAa;AAAA,MACX,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,IAAI,EAAE,MAAM,SAAS;AAAA,MACrB,SAAS,CAAC;AAAA,IACZ;AAAA,IACA,WAAW;AAAA,MACT,MAAM;AAAA,MACN,SAAS;AAAA,IACX;AAAA,IACA,OAAO;AAAA,MACL,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA;AAAA,IAEA,cAAc;AAAA,MACZ,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,gBAAgB;AAAA,MACd,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,UAAU;AAAA,MACR,MAAM;AAAA,MACN,UAAU;AAAA,MACV,SAAS,CAAC,WAAW,SAAS,QAAQ,YAAY,UAAU;AAAA,IAC9D;AAAA,EACF;AAAA,EACA,gBAAgB;AAAA,IACd,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ,IAAI,KAAK,eAAe,QAAQ,SAAS,EAAE;AAAA,IAC/D;AAAA,IACA,KAAK;AAAA,MACH,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ,SAAS,IAAI,KAAK,eAAe,QAAQ,SAAS,EAAE,CAAC;AAAA,IACzE;AAAA,IACA,aAAa;AAAA,MACX,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ,kBAAkB,IAAI,KAAK,GAAG;AAAA,IAClD;AAAA,EACF;AACF,EAAE;AAEF,IAAO,8BAAQ,WAAW;AAAA,EACxB,gBAAgB;AAAA,EAChB,eAAe,CAAC,IAAI;AAAA,EACpB,2BAA2B;AAC7B,CAAC;",
  "names": []
}
